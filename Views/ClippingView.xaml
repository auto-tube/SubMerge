<UserControl x:Class="AutoTubeWpf.Views.ClippingView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:AutoTubeWpf.Views"
             xmlns:viewmodels="clr-namespace:AutoTubeWpf.ViewModels"
            mc:Ignorable="d"
            d:DesignHeight="700" d:DesignWidth="800"
            d:DataContext="{d:DesignInstance Type=viewmodels:ClippingViewModel}"
            AllowDrop="True" Drop="ClippingView_Drop">

   <Grid Margin="15">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/> <!-- Input Selection -->
            <RowDefinition Height="*"/>    <!-- Queue Display -->
            <RowDefinition Height="Auto"/> <!-- Video Player Area -->
            <RowDefinition Height="Auto"/> <!-- Options -->
            <RowDefinition Height="Auto"/> <!-- Actions -->
        </Grid.RowDefinitions>

        <!-- Input Selection Area -->
        <GroupBox Header="Input Video(s)" Grid.Row="0" Padding="10" Margin="0,0,0,10"> <!-- Removed Style -->
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <TextBox Grid.Column="0" Text="{Binding InputDisplayPath}" IsReadOnly="True" VerticalContentAlignment="Center" Margin="0,0,10,0"/>
                         <!-- Removed materialDesign:HintAssist.Hint and Style -->
                <CheckBox Grid.Column="1" Content="Batch (Folder)" IsChecked="{Binding IsBatchMode}" VerticalAlignment="Center" Margin="0,0,10,0"/> <!-- Removed Style -->
                <Button Grid.Column="2" Content="Browse..." Command="{Binding SelectInputCommand}"/> <!-- Removed Style -->
            </Grid>
        </GroupBox>

        <!-- Queue Display Area -->
        <GroupBox Header="Video Queue" Grid.Row="1" Padding="10" Margin="0,0,0,10"> <!-- Removed Style -->
             <DataGrid ItemsSource="{Binding VideoQueue}"
                       SelectedItem="{Binding SelectedVideoItem, Mode=TwoWay}"
                       AutoGenerateColumns="False" CanUserAddRows="False"
                       IsReadOnly="True" SelectionMode="Single"
                       SelectionChanged="VideoQueue_SelectionChanged">
                       <!-- Removed Style and materialDesign attached properties -->
                 <DataGrid.Columns>
                     <DataGridTextColumn Header="File Name" Binding="{Binding FileName}" Width="*"/> <!-- Removed ElementStyle -->
                     <DataGridTextColumn Header="Status" Binding="{Binding Status}" Width="Auto"/> <!-- Removed ElementStyle -->
                     <DataGridTextColumn Header="Duration" Binding="{Binding Duration, StringFormat={}{0:hh\\:mm\\:ss}}" Width="Auto"/> <!-- Removed ElementStyle -->
                 </DataGrid.Columns>
             </DataGrid>
        </GroupBox>

        <!-- Video Player Area -->
        <GroupBox Header="Preview" Grid.Row="2" Padding="10" Margin="0,0,0,10"> <!-- Removed Style -->
                  <!-- Visibility binding might need adjustment if NullToVisibilityConverter was Material Design specific -->
                  <GroupBox.Visibility>
                      <Binding Path="SelectedVideoItem">
                          <Binding.Converter>
                              <local:NullToVisibilityConverter /> <!-- Assuming this is a custom converter -->
                          </Binding.Converter>
                      </Binding>
                  </GroupBox.Visibility>
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/> <!-- MediaElement -->
                    <RowDefinition Height="Auto"/> <!-- Controls -->
                </Grid.RowDefinitions>

                <Border Grid.Row="0" Background="Black" CornerRadius="3" Margin="0,0,0,5">
                    <MediaElement x:Name="PreviewPlayer" MinHeight="200" MaxHeight="300"
                                  Source="{Binding PlayerSource}"
                                  LoadedBehavior="Manual" UnloadedBehavior="Stop" Stretch="Uniform"
                                  ScrubbingEnabled="True"
                                  MediaOpened="PreviewPlayer_MediaOpened"
                                  MediaEnded="PreviewPlayer_MediaEnded"
                                  MediaFailed="PreviewPlayer_MediaFailed">
                        <!-- Removed i:Interaction.Triggers -->
                        <!-- Removed MediaElement.Style with DataTriggers, Play/Pause needs code-behind -->
                    </MediaElement>
                </Border>

                <!-- Playback Controls -->
                <StackPanel Grid.Row="1" Orientation="Vertical" Margin="0,5,0,0">
                     <Slider x:Name="SeekSlider" Minimum="0" Maximum="{Binding PlayerDurationSeconds, FallbackValue=1}"
                             Value="{Binding PlayerPositionSeconds, Mode=TwoWay}"
                             Margin="0,0,0,5"
                             PreviewMouseLeftButtonDown="SeekSlider_PreviewMouseLeftButtonDown"
                             PreviewMouseLeftButtonUp="SeekSlider_PreviewMouseLeftButtonUp"
                             ValueChanged="SeekSlider_ValueChanged">
                             <!-- Removed Style and i:Interaction.Triggers -->
                             <!-- Added standard event handlers for seeking -->
                    </Slider>
                    <TextBlock Text="{Binding PlayerPositionFormatted}" HorizontalAlignment="Right" Margin="0,-5,0,5"/> <!-- Removed Style -->

                   <StackPanel Orientation="Horizontal">
                        <Button Command="{Binding PlayPauseCommand}" Padding="5" Margin="0,0,10,0" ToolTip="Play/Pause">
                            <Button.Content>
                                <Binding Path="IsPlayerPlaying">
                                    <Binding.Converter>
                                        <local:BoolToPlayPauseTextConverter />
                                    </Binding.Converter>
                                </Binding>
                            </Button.Content>
                        </Button>
                             <!-- Removed Style, PackIcon. Using Text Content + Inline Converter -->
                        <Button Command="{Binding StopCommand}" Padding="5" Margin="0,0,20,0" ToolTip="Stop" Content="Stop"/>
                             <!-- Removed Style, PackIcon. Using Text Content -->

                        <TextBlock Text="Speed:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                        <Slider Minimum="0.1" Maximum="2.0" Value="{Binding PlayerSpeedRatio, Mode=TwoWay}" Width="100" TickFrequency="0.1" IsSnapToTickEnabled="True" VerticalAlignment="Center"/> <!-- Removed Style -->
                        <TextBlock Text="{Binding PlayerSpeedRatio, StringFormat={}{0:F1}x}" VerticalAlignment="Center" Margin="5,0,0,0"/>
                    </StackPanel>
                </StackPanel>
            </Grid>
        </GroupBox>

        <!-- Options Area -->
        <GroupBox Header="Clipping Options" Grid.Row="3" Padding="10" Margin="0,0,0,10"> <!-- Removed Style -->
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <!-- Column 0: Length & Count -->
                <StackPanel Grid.Row="0" Grid.Column="0" Margin="0,0,10,10">
                    <TextBlock Text="Clip Duration Range (seconds):" Margin="0,0,0,5"/> <!-- Removed Style -->
                    <StackPanel Orientation="Horizontal">
                         <TextBlock Text="Min:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                         <TextBox Text="{Binding MinClipLength, UpdateSourceTrigger=PropertyChanged}" Width="60"/> <!-- Replaced IntegerUpDown -->
                         <TextBlock Text="Max:" VerticalAlignment="Center" Margin="10,0,5,0"/>
                         <TextBox Text="{Binding MaxClipLength, UpdateSourceTrigger=PropertyChanged}" Width="60"/> <!-- Replaced IntegerUpDown -->
                    </StackPanel>
                </StackPanel>
                 <StackPanel Grid.Row="1" Grid.Column="0" Margin="0,0,10,10">
                     <TextBlock Text="Max Clips per Video:" Margin="0,0,0,5"/> <!-- Removed Style -->
                     <TextBox Text="{Binding ClipCount, UpdateSourceTrigger=PropertyChanged}" Width="80" HorizontalAlignment="Left"/> <!-- Replaced IntegerUpDown -->
                 </StackPanel>

                <!-- Column 1: Detection & Filters -->
                <StackPanel Grid.Row="0" Grid.Column="1" Margin="10,0,0,10">
                    <CheckBox Content="Use Scene Detection" IsChecked="{Binding UseSceneDetection}" Margin="0,0,0,5"/> <!-- Removed Style -->
                    <TextBlock Text="Scene Threshold (0-100):" IsEnabled="{Binding UseSceneDetection}" Margin="0,0,0,5"/> <!-- Removed Style -->
                    <TextBox Text="{Binding SceneThreshold, UpdateSourceTrigger=PropertyChanged}" Width="80" HorizontalAlignment="Left" IsEnabled="{Binding UseSceneDetection}"/> <!-- Replaced DoubleUpDown -->
                </StackPanel>
                 <StackPanel Grid.Row="1" Grid.Column="1" Margin="10,0,0,10">
                     <CheckBox Content="Format Clips as Vertical (9:16)" IsChecked="{Binding FormatAsVertical}"/> <!-- Removed Style -->
                 </StackPanel>
                 <StackPanel Grid.Row="2" Grid.Column="1" Orientation="Vertical" Margin="10,5,0,0">
                     <CheckBox Content="Remove Audio" IsChecked="{Binding RemoveAudio}" Margin="0,0,0,5"/> <!-- Removed Style -->
                     <CheckBox Content="Mirror Video (Horizontal Flip)" IsChecked="{Binding MirrorVideo}" Margin="0,0,0,5"/> <!-- Removed Style -->
                     <CheckBox Content="Enhance Video (Basic Contrast/Saturation)" IsChecked="{Binding EnhanceVideo}"/> <!-- Removed Style -->
                 </StackPanel>

            </Grid>
        </GroupBox>

        <!-- Action Buttons Area -->
        <StackPanel Grid.Row="4" Orientation="Horizontal" HorizontalAlignment="Left">
            <Button Content="Clear Queue" Command="{Binding ClearQueueCommand}" Margin="0,0,10,0"/> <!-- Removed Style -->
            <Button Command="{Binding StartStopClippingCommand}">
                    <Button.Content>
                        <Binding Path="IsProcessing" FallbackValue="Start Clipping Queue">
                            <Binding.Converter>
                                <local:BoolToProcessingButtonTextConverter />
                            </Binding.Converter>
                        </Binding>
                    </Button.Content>
                    <Button.Background>
                        <Binding Path="IsProcessing" FallbackValue="LightGreen">
                            <Binding.Converter>
                                <local:BoolToProcessingButtonColorConverter />
                            </Binding.Converter>
                        </Binding>
                    </Button.Background>
                    <!-- Removed Style, CornerRadius. Using Inline Converters -->
            </Button>
        </StackPanel>

    </Grid>

    <!-- Define Converters -->
    <!-- Temporarily commenting out resources to isolate StaticResource error -->
    <!--
    <UserControl.Resources>
        <local:BoolToProcessingButtonTextConverter x:Key="ProcessingButtonTextConverter"/>
        <local:BoolToProcessingButtonColorConverter x:Key="ProcessingButtonColorConverter"/>
        <local:BoolToPlayPauseTextConverter x:Key="BoolToPlayPauseTextConverter"/>
        <local:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
        <BooleanToVisibilityConverter x:Key="StandardBooleanToVisibilityConverter"/>
    </UserControl.Resources>
    -->
</UserControl>